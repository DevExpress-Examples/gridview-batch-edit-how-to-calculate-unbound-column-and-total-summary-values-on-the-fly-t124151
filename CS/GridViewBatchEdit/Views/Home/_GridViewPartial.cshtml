@using Models
@(
 Html.DevExpress().GridView<GridDataItem>(settings =>
      {
          settings.Name = "GridView";
          settings.Width = 600;
          settings.CallbackRouteValues = new { Controller = "Home", Action = "GridViewPartial" };
          settings.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Home", Action = "BatchUpdatePartial" };
          settings.SettingsEditing.Mode = GridViewEditingMode.Batch;

          settings.ClientSideEvents.BatchEditEndEditing = "OnBatchEditEndEditing";
          settings.ClientSideEvents.BatchEditStartEditing = "OnBatchEditStartEditing";
          settings.ClientSideEvents.BatchEditChangesCanceling = "OnBatchEditChangesCanceling";
          settings.ClientSideEvents.BatchEditRowDeleting = "OnBatchEditRowDeleting";

          settings.KeyFields(m=>m.ID);

          settings.CommandColumn.Visible = true;
          settings.CommandColumn.ShowNewButtonInHeader = true;
          settings.CommandColumn.ShowDeleteButton = true;

          string[] days = { "Mon", "Tue", "Wen" };
          foreach (var dayName in days)
          {
              settings.Columns.Add(column =>
              {
                  column.FieldName = dayName;
                  column.ColumnType = MVCxGridViewColumnType.SpinEdit;

                  ASPxSummaryItem summaryItem = new ASPxSummaryItem(column.FieldName, DevExpress.Data.SummaryItemType.Sum);
                  summaryItem.Tag = column.FieldName + "_Sum";
                  summaryItem.DisplayFormat = "{0}";
                  settings.TotalSummary.Add(summaryItem);

                  column.SetFooterTemplateContent(c =>
                  {
                      Html.DevExpress().Label(lbSettings =>
                      {
                          string fieldName = (c.Column as GridViewDataColumn).FieldName;
                          lbSettings.Name = "label" + fieldName;
                          lbSettings.Properties.EnableClientSideAPI = true;
                          ASPxSummaryItem summaryItem1 = c.Grid.TotalSummary.First(i => i.Tag == (fieldName + "_Sum"));
                          lbSettings.Text = c.Grid.GetTotalSummaryValue(summaryItem1).ToString();
                      }).Render();
                  });
              });
          }


          settings.Columns.Add(column =>
          {
              column.UnboundType = DevExpress.Data.UnboundColumnType.Decimal;
              column.FieldName = "Total";
              column.ReadOnly = true;
              column.Settings.ShowEditorInBatchEditMode = false;
              ASPxSummaryItem summaryItem = new ASPxSummaryItem(column.FieldName, DevExpress.Data.SummaryItemType.Sum);
              summaryItem.Tag = column.FieldName + "_Sum";
              summaryItem.DisplayFormat = "<strong>{0}</strong>";
              settings.TotalSummary.Add(summaryItem);

              column.SetFooterTemplateContent(c =>
              {
                  Html.DevExpress().Label(lbSettings =>
                  {
                      string fieldName = (c.Column as GridViewDataColumn).FieldName;
                      lbSettings.Name = "label" + fieldName;
                      lbSettings.Properties.EnableClientSideAPI = true;
                      ASPxSummaryItem summaryItem1 = c.Grid.TotalSummary.First(i => i.Tag == (fieldName + "_Sum"));
                      lbSettings.Text = c.Grid.GetTotalSummaryValue(summaryItem1).ToString();
                  }).Render();
              });
          });
          settings.CustomUnboundColumnData = (sender, e) =>
          {
              if (e.Column.FieldName == "Total")
              {
                  int tue = Convert.ToInt32(e.GetListSourceFieldValue("Tue"));
                  int mon = Convert.ToInt32(e.GetListSourceFieldValue("Mon"));
                  int wen = Convert.ToInt32(e.GetListSourceFieldValue("Wen"));
                  e.Value = mon + tue + wen;
              }
          };
          settings.Settings.ShowFooter = true;
          settings.CellEditorInitialize = (s, e) =>
          {
              ASPxEdit editor = (ASPxEdit)e.Editor;
              editor.ValidationSettings.Display = Display.Dynamic;
          };
      }).SetEditErrorText(ViewData["EditError"] == null ? "" : (string)ViewData["EditError"]).Bind(Model).GetHtml())
